@model S_EDex365.Model.Model.AdminDashboard
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_LayoutA.cshtml";
}




<div class="content-wrapper">
    <div class="container mt-4">
        <div class="row">
            <!-- Total Problems -->
            <div class="col-md-4 mb-3">
                <div class="card shadow-lg border-0" style="border-radius: 15px;">
                    <div class="card-body d-flex flex-column justify-content-center align-items-center"
                         style="background: linear-gradient(135deg, #007bff, #00c6ff); height:120px; border-radius: 15px;">
                        <h2 class="card-title text-center text-white mb-2" style="font-size: 1.5rem;">Total Problems</h2>
                        <h5 class="card-text text-center text-white fw-bold"
                            style="font-size: 2rem; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.4);">
                            @Model.TotalProblems
                        </h5>
                    </div>
                </div>
            </div>

            <!-- Pending Solutions -->
            <div class="col-md-4 mb-3">
                <div class="card shadow-lg border-0" style="border-radius: 15px;">
                    <div class="card-body d-flex flex-column justify-content-center align-items-center"
                         style="background: linear-gradient(135deg, #28a745, #6dbb6d); height:120px; border-radius: 15px;">
                        <h2 class="card-title text-center text-white mb-2" style="font-size: 1.5rem;">Pending Questions</h2>
                        <h5 class="card-text text-center text-white fw-bold"
                            style="font-size: 2rem; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.4);">
                            @Model.PendingSolutions
                        </h5>
                    </div>
                </div>
            </div>

            <!-- Total Solutions -->
            <div class="col-md-4 mb-3">
                <div class="card shadow-lg border-0" style="border-radius: 15px;">
                    <div class="card-body d-flex flex-column justify-content-center align-items-center"
                         style="background: linear-gradient(135deg, #f39c12, #ffbb33); height:120px; border-radius: 15px;">
                        <h2 class="card-title text-center text-white mb-2" style="font-size: 1.5rem;">Solutions</h2>
                        <h5 class="card-text text-center text-white fw-bold"
                            style="font-size: 2rem; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.4);">
                            @Model.TotalSolutions
                        </h5>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-5">
            <canvas id="myChart" style="max-height: 400px;"></canvas>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


@* <script>
    const ctx = document.getElementById('myChart');

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
            datasets: [{
                label: '# of Votes',
                data: [12, 19, 3, 5, 2, 3],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script> *@


@* everyday data *@


@* <script>
    const ctx = document.getElementById('myChart').getContext('2d');

    // Pass data from the model to JavaScript variables
    const totalProblems = @Model.TotalProblems;
    const pendingSolutions = @Model.PendingSolutions;
    const totalSolutions = @Model.TotalSolutions;

    // Initialize the chart
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Total Problems', 'Pending Solutions', 'Total Solutions'], // X-axis labels
            datasets: [{
                label: 'Statistics',
                data: [totalProblems, pendingSolutions, totalSolutions], // Data from the model
                backgroundColor: ['#FF5733', '#581845', '#FFC300'], // Custom colors for each bar
                borderColor: ['#FF5733', '#581845', '#FFC300'],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                },
                x: {
                    // Adjust bar and category widths
                    barPercentage: 0.5,         // Controls the width of each bar (0-1; smaller values make bars thinner)
                    categoryPercentage: 0.6     // Controls spacing around each bar within a group (0-1)
                }
            }
        }
    });
</script> *@

<script>
    const ctx = document.getElementById('myChart').getContext('2d');

    const totalProblems = @Model.TotalProblems;
    const pendingSolutions = @Model.PendingSolutions;
    const totalSolutions = @Model.TotalSolutions;

    // Improved Chart with new colors
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Total Problems', 'Pending Solutions', 'Total Solutions'],
            datasets: [{
                label: 'Statistics',
                data: [totalProblems, pendingSolutions, totalSolutions],
                backgroundColor: ['rgba(0, 123, 255, 0.8)', 'rgba(40, 167, 69, 0.8)', 'rgba(243, 156, 18, 0.8)'],
                borderColor: ['#007bff', '#28a745', '#f39c12'],
                borderWidth: 2,
                hoverBackgroundColor: ['rgba(0, 123, 255, 1)', 'rgba(40, 167, 69, 1)', 'rgba(243, 156, 18, 1)'],
                hoverBorderColor: ['#007bff', '#28a745', '#f39c12']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    titleColor: '#fff',
                    bodyColor: '#fff',
                    borderWidth: 1,
                    borderColor: '#ccc'
                }
            },
            scales: {
                x: {
                    ticks: {
                        font: {
                            size: 14,
                            family: 'Arial',
                            weight: 'bold'
                        },
                        color: '#555'
                    },
                    grid: {
                        display: false
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        font: {
                            size: 14,
                            family: 'Arial',
                            weight: 'bold'
                        },
                        color: '#555'
                    },
                    grid: {
                        color: 'rgba(200, 200, 200, 0.3)'
                    }
                }
            }
        }
    });
</script>


@* whole month data *@
@* <script>
    const ctx = document.getElementById('myChart').getContext('2d');

    // Pass month data from the model to JavaScript variables
    const totalProblemsMonth1 = @Model.TotalProblemsMonth1;
    const pendingSolutionsMonth1 = @Model.PendingSolutionsMonth1;
    const totalSolutionsMonth1 = @Model.TotalSolutionsMonth1;

    const totalProblemsMonth2 = @Model.TotalProblemsMonth2;
    const pendingSolutionsMonth2 = @Model.PendingSolutionsMonth2;
    const totalSolutionsMonth2 = @Model.TotalSolutionsMonth2;

    // Initialize the chart
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Total Problems', 'Pending Solutions', 'Total Solutions'], // X-axis labels for metrics
            datasets: [
                {
                    label: 'Month 1', // First month data
                    data: [totalProblemsMonth1, pendingSolutionsMonth1, totalSolutionsMonth1],
                    backgroundColor: 'rgba(75, 192, 192, 0.5)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Month 2', // Second month data
                    data: [totalProblemsMonth2, pendingSolutionsMonth2, totalSolutionsMonth2],
                    backgroundColor: 'rgba(153, 102, 255, 0.5)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1
                }
            ]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script> *@
